var CLIENT_ID = '34258';
var CLIENT_SECRET = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';
var SPREADSHEET_NAME = "StravaDataPull";
var SPREADSHEET_ID = "1GwjNlLSzzpyJQaarV7Ri6axeN8OuHy4loRFcHFxDYhU";
var SHEET_NAME = "Sheet1";
var DEBUG = false;


/**
 * Configures the service.
 */
function getService() {
  return OAuth2.createService('Strava')
      // Set the endpoint URLs.
      .setAuthorizationBaseUrl('https://www.strava.com/oauth/authorize')
      .setTokenUrl('https://www.strava.com/oauth/token')

      // Set the client ID and secret.
      .setClientId(CLIENT_ID)
      .setClientSecret(CLIENT_SECRET)

      // Set the name of the callback function that should be invoked to complete
      // the OAuth flow.
      .setCallbackFunction('authCallback')

      // Set the property store where authorized tokens should be persisted.
      .setPropertyStore(PropertiesService.getUserProperties())
      //Include private activities when retrieving activities.
      //.setScope (“view_private”)
}

/**
 * Handles the OAuth callback.
 */
function authCallback(request) {
  var service = getService();
  var authorized = service.handleCallback(request);
  if (authorized) {
    return HtmlService.createHtmlOutput('Success!');
  } else {
    return HtmlService.createHtmlOutput('Denied');
  }
}

/**
 * Reset the authorization state, so that it can be re-tested.
 */
function reset() {
  var service = getService();
  service.reset();
}


/**
 * Authorizes and makes a request to the GitHub API.
 */
function run() {
  var service = getService();
  if (service.hasAccess()) {
    var url = 'https://www.strava.com/api/v3/athlete';
    var response = UrlFetchApp.fetch(url, {
      headers: {
        Authorization: 'Bearer ' + service.getAccessToken()
      }
    });
    var result = JSON.parse(response.getContentText());
    Logger.log(JSON.stringify(result, null, 2));
  } else {
    var authorizationUrl = service.getAuthorizationUrl();
    Logger.log('Open the following URL and re-run the script: %s',
        authorizationUrl);
  }
}

function retrieveData() {
  //if sheet is empty retrieve all data
  var service = getService();
  if (service.hasAccess()) {
    var sheet = getStravaSheet();
    var unixTime = retrieveLastDate(sheet);
  var pagenum = 1
  var data = [] 
    // recurse through pages until result is empty
    
    do {
    var url = 'https://www.strava.com/api/v3/clubs/510682/activities?page='+pagenum+'&per_page=200';
    Logger.log(url)
      var response = UrlFetchApp.fetch(url, {
      headers: {
        Authorization: 'Bearer ' + service.getAccessToken()
      }
    });
    
    var result = JSON.parse(response.getContentText());

  for (var i = 0; i < result.length; i++) {
      var item = [result[i]['athlete']['firstname']+" "+result[i]['athlete']['lastname'],
                  result[i]['name'],
                  result[i]['distance']/1000,
                  result[i]['moving_time']/3600/24,
                  result[i]['elapsed_time']/3600/24,
                  result[i]['total_elevation_gain'],
                  result[i]['type']];
      data.push(item);
   }
pagenum = pagenum+1
    } while (result.length != 0)
   
  var datarev = data.reverse()
    
    insertData(sheet,datarev);
   
  } else {
    var authorizationUrl = service.getAuthorizationUrl();
    Logger.log('Open the following URL and re-run the script: %s',
        authorizationUrl);
  }
}

function retrieveLastDate(sheet) {
  var lastRow = sheet.getLastRow();
  var unixTime = 0; 
  if (lastRow > 0) { 
      var dateCell = sheet.getRange(lastRow, 1);
      var dateString = dateCell.getValue();
      var date = new Date((dateString || "").replace(/-/g,"/").replace(/[TZ]/g," "));
      unixTime = date/1000;
   }
   return unixTime;
}




function convertData(result) {

// if(typeof(result) === "undefined"){
 //     return "Node Not Available";
//    } else if(typeof(result) === "object"){
//      var data = [];
//      
//      for(var obj in result){
//        data.push([result[obj]]);
//      }
//      return data;
//    } else if(typeof(result) !== "object") {
//      return result;
//    }
// }

  var data = [],datarev =[];
  
  for (var i = 0; i < result.length; i++) {
      var item = [result[i]['athlete']['firstname']+" "+result[i]['athlete']['lastname'],
                  result[i]['name'],
                  result[i]['distance']/1000,
                  result[i]['moving_time']/3600/24,
                  result[i]['elapsed_time']/3600/24,
                  result[i]['total_elevation_gain'],
                  result[i]['type']];
      data.push(item);
   
  }
  datarev = data.reverse()
  return datarev;
}

function getStravaSheet() {
  var spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
  var sheet = getOrCreateSheet(spreadsheet, SHEET_NAME);
  return sheet;
}

function insertData(sheet, data) {
  var header = ["Name","Activity Name","Distance","Moving Time","Elapsed Time","Elevation Gain","Activity"];
  ensureHeader(header, sheet);
  
  var lastRow = sheet.getLastRow();
  var range = sheet.getRange(lastRow+1,1,data.length,7);
  range.setValues(data); 
}

function ensureHeader(header, sheet) {
  // Only add the header if sheet is empty
  if (sheet.getLastRow() == 0) {
    if (DEBUG) Logger.log('Sheet is empty, adding header.')    
    sheet.appendRow(header);
    return true;
    
  } else {
    if (DEBUG) Logger.log('Sheet is not empty, not adding header.')
    return false;
  }
}


function getOrCreateSheet(spreadsheet, sheetName) {
  var sheet = spreadsheet.getSheetByName(sheetName);
  
  if (!sheet) {
    if (DEBUG) Logger.log('Sheet "%s" does not exists, adding new one.', sheetName);
    sheet = spreadsheet.insertSheet(sheetName)
  } 
  
  return sheet;
}

